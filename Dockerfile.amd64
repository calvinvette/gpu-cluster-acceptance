# ---- builder ----
FROM nvcr.io/nvidia/cuda:12.4.1-devel-ubuntu22.04 AS builder

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    git build-essential cmake libopenmpi-dev openmpi-bin && \
    rm -rf /var/lib/apt/lists/*

# nvbandwidth
RUN git clone --depth 1 https://github.com/NVIDIA/nvbandwidth /opt/nvbandwidth
WORKDIR /opt/nvbandwidth
# RUN . ./debian_install.sh
RUN sudo add-apt-repository universe && sudo apt-get update
RUN apt-get install -y libboost-all-dev libboost-program-options-dev
RUN mkdir -p /opt/nvbandwidth/build
WORKDIR /opt/nvbandwidth/build
RUN cmake ..
RUN make -C /opt/nvbandwidth/build

WORKDIR /

# nccl-tests
RUN git clone --depth 1 https://github.com/NVIDIA/nccl-tests /opt/nccl-tests && \
    make -C /opt/nccl-tests MPI=1

# ---- runtime ----
FROM nvcr.io/nvidia/cuda:12.4.1-runtime-ubuntu22.04

LABEL org.opencontainers.image.licenses="AGPL-3.0-only"

# minimal runtime deps
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    python3 python3-pip python3-venv \
    rdma-core libibverbs1 libopenmpi3 openmpi-bin \
    pciutils iproute2 iputils-ping jq fio && \
    rm -rf /var/lib/apt/lists/*

# (Optional) DCGM tools inside container if you want to run dcgmi from here
# RUN apt-get update && apt-get install -y dcgm dcgm-exporter && rm -rf /var/lib/apt/lists/*

# Python deps (install only what you need)
COPY pyproject.toml /app/pyproject.toml
RUN pip3 install --no-cache-dir --upgrade pip
RUN pip3 install -e /app

# PyTorch + CUDA 12.4 wheel (smaller than NGC PyTorch image)
RUN pip3 install --no-cache-dir --index-url https://download.pytorch.org/whl/cu124 \
    torch torchvision torchaudio

# Copy binaries from builder
COPY --from=builder /opt/nvbandwidth /opt/nvbandwidth
COPY --from=builder /opt/nccl-tests /opt/nccl-tests

# Non-root user & workspace
RUN useradd -ms /bin/bash trainer && mkdir -p /workspace && chown -R trainer:trainer /workspace /opt
USER trainer
WORKDIR /workspace

COPY --chown=trainer:trainer scripts/ ./scripts/
COPY --chown=trainer:trainer training/ ./training/
COPY --chown=trainer:trainer configs/ ./configs/
ENV PATH="/opt/nvbandwidth:${PATH}"